apiVersion: apps/v1
kind: Deployment
metadata:
  name: store-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: store-api
  template:
    metadata:
      labels:
        app: store-api
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: postgresql-secrets
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: postgresql-secrets
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: postgresql-secrets
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              key: POSTGRES_HOST
              name: postgresql-secrets
        image: '8'
        name: store-api
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: '1'
            memory: 512Mi
          requests:
            cpu: '0.5'
            memory: 256Mi
      serviceAccountName: store-api-oidc
